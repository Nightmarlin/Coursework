<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="MainIcon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\MainIcon.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="ProjectTemplate" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
//&lt;using&gt;

namespace YourProject {
	
	/// &lt;summary&gt;
	/// Your program in C#. You can take this and compile it separately and it will run just the same
	/// as it does in the debugger.
	/// The regions help split the program into manageable chunks
	/// &lt;/summary&gt;
	public static class Program {

		// This is where your variables are kept
		#region Internal Variables

		//&lt;VariableSet&gt;
		
		// public static T FieldName;
		#endregion

		/// &lt;summary&gt;
		/// The entry point for your program
		/// &lt;/summary&gt;
		public static void Main(string[] args) {
			#region Programmed Logic

			//&lt;Program&gt;

			#endregion Program Logic
		}

	}

}</value>
  </data>
  <data name="Wrapper" xml:space="preserve">
    <value>using System;
using System.Collections.Generic;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;

using Newtonsoft.Json;

namespace YourProject {

/*
	│
	├─┬─ Project Directory
	│ └─┬ ProjectName.BSharp | BSharp save file
	│   ├ ProjectName.cs     | User code file
	│   └ ProjectName.exe    | Generated EXE file
	│
 */

	/// &lt;summary&gt;
	/// Template class for code construction. User code is placed in the Template class
	/// and is then wrapped by this class
	/// &lt;/summary&gt;
	public class Main_Program {

		private static CancellationTokenSource CTokenSource;
		private static CancellationToken CToken;

		/// &lt;summary&gt;
		/// The name of the program being debugged.
		/// Is the namespace of the program.
		/// &lt;/summary&gt;
		private static string Name;

		//

		private static void Main(string[] Args) {
			CTokenSource = new CancellationTokenSource(); // B̶l̶a̶c̶k-̶m̶a̶g̶i̶c  Generates a CancellationToken that can be
			CToken = CTokenSource.Token; // ̶W̶i̶t̶c̶h̶c̶r̶a̶f̶t-̶a̶n̶d-̶w̶i̶z̶a̶r̶d̶r̶y         used to kill a Task

			Name = typeof(Main_Program).Namespace; // Software saves the namespace as the name assigned to the program

			try {

				if (Args == null) return;

				if (Args[0] == "DEBUG") { // Check if DEBUG was passed. If it wasn't then an IndexOutOfRangeException
										    //   may occur.

					Task.Factory.StartNew(async () =&gt; { // ̶A̶s̶y̶n̶c̶h̶r̶o̶n̶o̶u̶s-̶m̶a̶g̶i̶c̶k
						while (true) { // Do it forever

							if (CToken.IsCancellationRequested) return; // Quit if we have been asked to

							Console.WriteLine(@"DAT|" + JsonConvert.SerializeObject(ObserveVariables()));
								// Do the really cool thing and send it to the console

							await Task.Delay(250); // Delay 0.25s

						}
					}, CToken); // Pass the CancellationToken to the Task

					Console.WriteLine(@"Debugging of program " + Name + @" in progress"); // Let the world know
                                                                         // we're debugging

				}

			} catch (IndexOutOfRangeException) {
				Args = new[] {""};
			} // If no arguments were supplied, this catches the IndexOutOfRangeException that would occur

			// Run their code

			Program.Main(Args);

			// Finish up

			CTokenSource.Cancel();

		}

		#region Get variables

		private static List&lt;string[]&gt; ObserveVariables() {

			// Get a list of all the variables that are being observed and their contents using Reflection

			var ReflectionInfo = typeof(Program).GetFields(BindingFlags.NonPublic |
			                                               BindingFlags.Public |
			                                               BindingFlags.Static);
				// Returns a list of all the static variables in the Program class
				// This is useful because it allows me to dynamically read the class' contents at runtime

			var StringSet = new List&lt;string[]&gt;();

			foreach (var FI in ReflectionInfo) {
				// for every static variable in the class, return its Name, Type and Value
				StringSet.Add(new[] {FI.Name, (FI.GetValue(null) ?? "null").ToString(), FI.FieldType.Name});
					// Using null coalescence is a good way to stop errors because of null values
			}

			return StringSet;

		}

		#endregion

	}

}</value>
  </data>
</root>